{"version":3,"sources":["components/AboutModal.tsx","components/Header.tsx","utils/utils.tsx","components/EntryModal.tsx","components/EpisodeModal.tsx","components/EntrySearch.tsx","components/App.tsx","index.tsx"],"names":["AboutModal","show","handleClose","Modal","onHide","size","Header","closeButton","Body","style","textJustify","href","useState","aboutVisible","showAbout","className","Navbar","bg","variant","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","onClick","a","axios","get","res","data","SpreakerWidget","episode","embed","loadEmbed","transform","node","index","name","attribs","width","height","convertNodeToElement","useEffect","link","then","console","log","html","parseHTML","catch","error","EntryModal","entry","episodeLink","cached","cacheEntry","centered","word","def","source","Button","block","EpisodeModal","entries","cacheID","find","e","filter","map","undefined","title","ListGroup","ListGroupItem","key","color","EntrySearch","displayEntry","value","setValue","Form","Control","placeholder","onChange","currentTarget","matchSorter","keys","action","App","setData","displayedEntry","displayedEpisode","displayEpisode","tab","setTab","getCurrentData","Tabs","activeKey","onSelect","t","Tab","eventKey","reduce","arr","curr","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6149f3e2.chunk.js","sourcesContent":["import React from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\ninterface Props {\r\n  show: boolean\r\n  handleClose: () => void\r\n}\r\n\r\nexport default function AboutModal({ show, handleClose }: Props) {\r\n  return (\r\n    <Modal show={show} onHide={handleClose} size=\"xl\">\r\n      <Modal.Header closeButton>About</Modal.Header>\r\n      <Modal.Body style={{ textJustify: 'auto' }}>\r\n        <h5>Come funziona:</h5>\r\n        <p>Il sito si aggiorna automaticamente leggendo le descrizioni delle puntate del podcast e trovando le definizioni. Questo processo √® quindi automatico e lontano dall'essere perfetto: se dovessero mancare delle definizioni, contattate l'autore del sito.</p>\r\n        <h5>Formati riconosciuti:</h5>\r\n        <p>Al fine di rendere pi√π facile l'aggiornamento del sito, sarebbe meglio che il formato del nikzionario all'interno delle note degli episodi rimanesse costante. Lo script che aggiorna le definizioni ragiona cos√¨:</p>\r\n        <ul>\r\n          <li>\r\n            <p>Il Nikzionario √® preceduto da una linea che comprende <code>+nikzionario</code> o <code>üçïnikzionario</code> (caps insentive, validi anche con uno spazio tra simbolo e parola), oppure che finisce con <code>nikzionario</code>. Se non viene trovata una linea con queste caratteristiche, la puntata non ha un Nikzionario.</p>\r\n          </li>\r\n          <li>\r\n            <p>Il Nikzionario finisce quando ci sono le indicazioni degli ospiti e dell'editor, ovvero una linea che inizia con <code>con:</code> oppure <code>editato da:</code>. Se non viene trovata una linea con queste caratteristiche, finisce con la fine delle note dell'episodio.</p>\r\n          </li>\r\n          <li>\r\n            <p>Ogni \"entry\" ha una parola e una definizione, separate da un <code>:</code> o, se non ce n'√® nessuno, da un <code>-</code>. Se non c'√® nessuno dei due simboli, la linea non ha nessuna \"entry\"</p>\r\n          </li>\r\n        </ul>\r\n        <h5>Problemi?</h5>\r\n        <p>Il sito √® un progetto open source disponibile su GitHub, quindi chi √® in grado pu√≤ contribuire direttamente l√¨. In caso di problemi potete contattare l'autore del sito tramite le \"Issues\" di GitHub, oppure tramite il suo profilo.</p>\r\n        <p>Link:</p>\r\n        <ul>\r\n          <li><a href=\"https://github.com/EndBug/nikzionario\">Progetto del sito</a></li>\r\n          <li><a href=\"https://github.com/EndBug\">Profilo dell'autore</a></li>\r\n        </ul>\r\n      </Modal.Body>\r\n    </Modal >\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport AboutModal from './AboutModal'\r\n\r\nexport default function Header() {\r\n  const [aboutVisible, showAbout] = useState(false)\r\n\r\n  return (\r\n    <div>\r\n      <header className=\"Header\">\r\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n          <Navbar.Brand href=\"/\">Nikzionario‚Ñ¢</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n              <Nav.Link onClick={() => showAbout(true)}>About</Nav.Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n      </header>\r\n      <AboutModal show={aboutVisible} handleClose={() => { showAbout(false) }} />\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport parseHTML, { convertNodeToElement, Transform } from 'react-html-parser'\r\n\r\nexport interface Entry {\r\n  word: string\r\n  def: string\r\n  source: {\r\n    id: number\r\n    title: string\r\n    link: string\r\n  }\r\n}\r\n\r\nexport interface DataFile {\r\n  last_update: Date\r\n  entries: Entry[]\r\n}\r\n\r\nexport async function getCurrentData(): Promise<DataFile> {\r\n  const res = await axios.get('https://raw.githubusercontent.com/EndBug/nikzionario/data/data.json')\r\n  return res.data\r\n}\r\n\r\nexport async function getRealEpisodeURL(id: number) {\r\n  const res = await axios.get(`https://www.spreaker.com/episode/${id}`)\r\n  return res.request?.res.responseUrl\r\n}\r\n\r\nexport function SpreakerWidget({ episode }: { episode: Entry['source'] }) {\r\n  const [embed, loadEmbed] = useState<any>()\r\n\r\n  const transform: Transform = (node, index) => {\r\n    if (node.name == 'iframe' && node.attribs) {\r\n      node.attribs.width = '100%'\r\n      node.attribs.height = '100%'\r\n    }\r\n    return convertNodeToElement(node, index, transform)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!embed) axios.get(`https://api.spreaker.com/oembed?url=${episode.link}`)\r\n      .then(({ data }) => {\r\n        console.log(data.html)\r\n        if (typeof data == 'object' && data.html) {\r\n          loadEmbed(parseHTML(data.html, { transform }))\r\n        }\r\n      })\r\n      .catch(console.error)\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <a href={episode.link} >\r\n        {embed}\r\n      </a>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport { Entry, SpreakerWidget } from '../utils/utils'\r\n\r\ninterface Props {\r\n  entry: Entry | undefined\r\n  handleClose: () => void\r\n  episodeLink: (id: number) => void\r\n}\r\n\r\nexport default function EntryModal({ entry, handleClose, episodeLink }: Props) {\r\n  const [cached, cacheEntry] = useState<Entry | undefined>()\r\n\r\n  useEffect(() => {\r\n    if (entry) cacheEntry(entry)\r\n  }, [entry])\r\n\r\n  return (\r\n    <Modal\r\n      show={!!entry}\r\n      onHide={handleClose}\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        {entry?.word}\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <h5>Definizione:</h5>\r\n        {cached?.def}\r\n        <hr />\r\n        <h5>Episodio:</h5>\r\n        {cached && <SpreakerWidget episode={cached.source} />}\r\n        <Button\r\n          variant=\"light\"\r\n          block\r\n          onClick={() => entry && episodeLink(entry.source.id)}\r\n        >\r\n          Altre \"definizioni\" da questo episodio\r\n        </Button>\r\n      </Modal.Body>\r\n    </Modal>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport ListGroup from 'react-bootstrap/esm/ListGroup'\r\nimport ListGroupItem from 'react-bootstrap/esm/ListGroupItem'\r\n\r\nimport { Entry, SpreakerWidget } from '../utils/utils'\r\n\r\ninterface Props {\r\n  id: number | undefined\r\n  entries: Entry[]\r\n  handleClose: () => void\r\n}\r\n\r\nexport default function EpisodeModal({ id, entries, handleClose }: Props) {\r\n  const [cached, cacheID] = useState<number | undefined>()\r\n  const episode = {\r\n    source: entries.find(e => e.source.id === cached)?.source,\r\n    entries: entries.filter(e => e.source.id === cached).map(e => ({ ...e, source: undefined }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (typeof id != 'undefined') cacheID(id)\r\n  }, [id])\r\n\r\n  return (\r\n    <Modal\r\n      show={!!id}\r\n      onHide={handleClose}\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        {episode.source?.title}\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <h5>Episodio:</h5>\r\n        <div>\r\n          {episode.source && <SpreakerWidget episode={episode.source} />}\r\n        </div>\r\n        <hr />\r\n        <h5>Definizioni:</h5>\r\n        <ListGroup>\r\n          {episode.entries.map((entry, index) => (\r\n            <ListGroupItem key={index} style={{ color: '#495057' }}>\r\n              <b>{entry.word}</b>: {entry.def}\r\n            </ListGroupItem>\r\n          ))}\r\n        </ListGroup>\r\n      </Modal.Body>\r\n    </Modal>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport matchSorter from 'match-sorter'\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport ListGroup from 'react-bootstrap/esm/ListGroup'\r\nimport ListGroupItem from 'react-bootstrap/esm/ListGroupItem'\r\n\r\nimport { Entry } from '../utils/utils'\r\n\r\ninterface Props {\r\n  entries: Entry[]\r\n  displayEntry: (entry: Entry) => void\r\n}\r\n\r\nexport default function EntrySearch({ entries, displayEntry }: Props) {\r\n  const [value, setValue] = useState<string>()\r\n\r\n  return (\r\n    <div>\r\n      <Form>\r\n        <Form.Control\r\n          placeholder=\"Cerca\"\r\n          value={value}\r\n          onChange={e => setValue(e.currentTarget.value)}\r\n        />\r\n      </Form>\r\n      <ListGroup>\r\n        {\r\n          matchSorter(entries, value, { keys: ['word', 'def'] })\r\n            .map((e: Entry) => (\r\n              <ListGroupItem action onClick={() => displayEntry(e)} key={e.word + e.source.id}>\r\n                <b>{e.word}</b>: {e.def}\r\n              </ListGroupItem>\r\n            ))\r\n        }\r\n      </ListGroup>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport Tab from 'react-bootstrap/Tab'\r\nimport Tabs from 'react-bootstrap/Tabs'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport ListGroupItem from 'react-bootstrap/ListGroupItem'\r\n\r\nimport EntryModal from './EntryModal'\r\nimport EpisodeModal from './EpisodeModal'\r\nimport EntrySearch from './EntrySearch'\r\n\r\nimport { DataFile, getCurrentData, Entry } from '../utils/utils'\r\n\r\nexport default function App() {\r\n  const [data, setData] = useState<DataFile>(),\r\n    [displayedEntry, displayEntry] = useState<Entry>(),\r\n    [displayedEpisode, displayEpisode] = useState<number>(),\r\n    [tab, setTab] = useState<string | null>('entries')\r\n\r\n  useEffect(() => {\r\n    getCurrentData().then(setData)\r\n  }, [data])\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        data\r\n          ? (\r\n            <div>\r\n              <Tabs\r\n                id=\"main tab menu\"\r\n                activeKey={tab}\r\n                onSelect={t => {\r\n                  if (displayedEntry) displayEntry(undefined)\r\n                  if (displayedEpisode) displayEpisode(undefined)\r\n                  setTab(t)\r\n                }}\r\n              >\r\n                <Tab\r\n                  eventKey=\"entries\"\r\n                  title={'\"\"\"Definizioni\"\"\"'}\r\n                >\r\n                  <ListGroup>\r\n                    {data.entries.map(e => (\r\n                      <ListGroupItem action onClick={() => displayEntry(e)} key={e.word + e.source.id}>\r\n                        <b>{e.word}</b>: {e.def}\r\n                      </ListGroupItem>\r\n                    ))}\r\n                  </ListGroup>\r\n                  <EntryModal\r\n                    entry={displayedEntry}\r\n                    handleClose={() => { displayEntry(undefined) }}\r\n                    episodeLink={id => {\r\n                      displayEntry(undefined)\r\n                      displayEpisode(id)\r\n                    }}\r\n                  />\r\n                </Tab>\r\n                <Tab\r\n                  eventKey=\"episodes\"\r\n                  title=\"Puntate\"\r\n                >\r\n                  <ListGroup>\r\n                    {\r\n                      data.entries\r\n                        .map(e => e.source)\r\n                        .reduce((arr, curr) => arr.find(e => e.id === curr.id) ? arr : [...arr, curr], [] as Entry['source'][])\r\n                        .map(e => (\r\n                          <ListGroupItem action onClick={() => displayEpisode(e.id)} key={e.id}>\r\n                            {e.title}\r\n                          </ListGroupItem>\r\n                        ))\r\n                    }\r\n                  </ListGroup>\r\n                  <EpisodeModal id={displayedEpisode} entries={data.entries} handleClose={() => { displayEpisode(undefined) }} />\r\n                </Tab>\r\n                <Tab\r\n                  eventKey=\"search\"\r\n                  title=\"Ricerca\"\r\n                >\r\n                  <EntrySearch entries={data.entries} displayEntry={displayEntry} />\r\n                  <EntryModal\r\n                    entry={displayedEntry}\r\n                    handleClose={() => { displayEntry(undefined) }}\r\n                    episodeLink={id => {\r\n                      displayEntry(undefined)\r\n                      displayEpisode(id)\r\n                    }}\r\n                  />\r\n                </Tab>\r\n              </Tabs>\r\n            </div>\r\n          )\r\n          : 'Loading...'\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport Header from './components/Header'\r\nimport App from './components/App'\r\n// import Footer from './Footer';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Header />\r\n    <App />\r\n    {/* <Footer /> */}\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}